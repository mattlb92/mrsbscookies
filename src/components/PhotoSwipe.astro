---
const galleryJson = await Astro.locals.runtime.env.GALLERY_IMAGES.get("gallery/full_resolution/gallery.json");

if (!galleryJson || !galleryJson.body) {
  throw new Error("Could not load gallery metadata from R2");
} else {
}

let images;
try {
  const text = await galleryJson.text();
  //console.log("Raw JSON text:", text); // Debug the raw content
  
  const metadata = JSON.parse(text);
  //console.log("Parsed metadata:", metadata); // Debug the parsed structure
  
  if (!Array.isArray(metadata)) {
    throw new Error("Gallery metadata is not an array");
  }

  images = metadata.map(({ src, width, height, alt }) => {
    if (!src) {
      console.warn("Image entry missing src:", { src, width, height, alt });
      return null;
    }
    
    const filename = src.split('/').pop();
    return {
    lowSrc: `/r2-images/gallery/low_resolution/${filename}`,
    highSrc: `/r2-images/gallery/full_resolution/${filename}`,
      width: width || 0,  // Default values if missing
      height: height || 0,
      alt: alt || "Gallery image"
    };
  }).filter(Boolean); // Remove any null entries from invalid images

} catch (err) {
  console.error("Failed to process gallery metadata:", err);
  throw new Error(`Gallery processing failed: ${err.message}`);
}

//console.log("Processed images:", images);

---

<div id="gallery" class="gallery">
  {images.map((img, index) => (
    <a
      href={img.highSrc}
      data-pswp-src={img.highSrc}
      data-pswp-width={img.width}
      data-pswp-height={img.height}
      key={index}
      target="_blank" 
      rel="noreferrer"
    >
      <img
        src={img.lowSrc}
        alt={img.alt}
        width={img.width / 5}
        height={img.height / 5}
        loading="lazy"
        decoding="async"
      />
    </a>
  ))}
</div>

<script>
  import 'photoswipe/style.css'
  import pswpModule from 'photoswipe'
  import PhotoSwipeLightbox from 'photoswipe/lightbox'

  const lightbox = new PhotoSwipeLightbox({
    pswpModule,
    children: 'a',
    gallery: '#gallery',
  })

  document.addEventListener(
    'astro:page-load',
    () => { if (lightbox) lightbox.init() },
    { once: false },
  )
</script>
