---
const galleryJson = await Astro.locals.runtime.env.GALLERY_IMAGES.get("gallery/full_resolution/gallery.json");

if (!galleryJson || !galleryJson.body) {
  throw new Error("Could not load gallery metadata from R2");
} else {
}

try {
  const text = await galleryJson.text();
  const metadata = JSON.parse(text);

  // Transform metadata with correct paths
  const images = metadata.map(({ src, width, height, alt, hash }) => {
    // Extract filename from full path
    const filename = src.split('/').pop();

    return {
      // Point to the actual R2 paths (no /r2-images prefix needed)
      lowSrc: `/gallery/low_resolution/${filename}`,
      highSrc: `/gallery/full_resolution/${filename}`,
      width,
      height,
      alt: alt || "Gallery image",
      hash
    };
  });
} catch (err) {
console.log("FAILED");
  throw new Error("Failed to process gallery metadata");
}
console.log("HERE....");
console.log("image: ", images);

// Fetch both JSON files separately
//const [fullResObject, lowResObject] = await Promise.all([
//  Astro.locals.runtime.env.GALLERY_IMAGES.get("gallery/full-res/gallery.json"),
//  Astro.locals.runtime.env.GALLERY_IMAGES.get("gallery/low-res/gallery.json")
//]);
//
//if (!fullResObject || !lowResObject) {
//  throw new Error("Could not load gallery metadata from R2");
//}
//
//try {
//  const [fullResText, lowResText] = await Promise.all([
//    fullResObject.text(),
//    lowResObject.text()
//  ]);
//
//  const fullResMetadata = JSON.parse(fullResText);
//  const lowResMetadata = JSON.parse(lowResText);
//
//  // Create a map of low-res images by filename for quick lookup
//  const lowResMap = new Map();
//  lowResMetadata.forEach(img => {
//    const filename = img.src.split('/').pop();
//    lowResMap.set(filename, img);
//  });
//
//  // Combine the metadata
//  const images = fullResMetadata.map(fullResImg => {
//    const filename = fullResImg.src.split('/').pop();
//    const lowResImg = lowResMap.get(filename);
//
//    return {
//      lowSrc: `/r2-images/gallery/low-res/${filename}`,
//      highSrc: `/r2-images/${fullResImg.src}`,
//      width: fullResImg.width,
//      height: fullResImg.height,
//      alt: fullResImg.alt || "Gallery image"
//    };
//  });
//} catch (err) {
//  throw new Error("Failed to process gallery metadata");
//}
---

<par> WTF IS GOING ON </par>
<div class="gallery">
  {images.map((img, index) => (
    <a 
      href={img.highSrc} 
      data-pswp-width={img.width} 
      data-pswp-height={img.height} 
      data-pswp-src={img.highSrc}
      target="_blank" 
      rel="noreferrer"
      class="gallery-item"
    >
      <img 
        src={img.lowSrc}
        alt={img.alt} 
        width={img.width / 5}
        height={img.height / 5}
        loading="lazy" 
        decoding="async" 
      />
    </a>
  ))}
</div>

<style>
  .gallery {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1rem;
    padding: 1rem;
  }
  .gallery-item {
    display: block;
    overflow: hidden;
    border-radius: 8px;
    transition: transform 0.2s ease;
  }
  .gallery-item:hover {
    transform: scale(1.02);
  }
  .gallery-item img {
    width: 100%;
    height: auto;
    object-fit: cover;
    aspect-ratio: attr(width) / attr(height);
  }
</style>

<script type="module" client:load>
  import PhotoSwipeLightbox from 'photoswipe/lightbox';
  import pswpModule from 'photoswipe';
  import 'photoswipe/style.css';

  const lightbox = new PhotoSwipeLightbox({
    gallery: '.gallery',
    children: 'a',
    pswpModule: () => pswpModule,
    showHideAnimationType: 'fade',
    bgOpacity: 0.9,
  });

  // Use the high-res image in lightbox
  lightbox.on('itemData', (e) => {
    e.itemData.src = e.element.dataset.pswpSrc;
  });

  lightbox.init();
</script>
